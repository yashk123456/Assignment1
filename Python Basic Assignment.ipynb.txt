{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "67eee6fb-20f5-4808-a9d3-8f1a8339620f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, welcome to Python programming!\n"
     ]
    }
   ],
   "source": [
    "# Exercise 1: Simple Message\n",
    "message = \"Hello, welcome to Python programming!\"\n",
    "print(message)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f7e7317f-4fd2-427f-8068-aa543e0eb9c1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Python is fun!\n",
      "Let's learn Python together.\n"
     ]
    }
   ],
   "source": [
    "# Exercise 2: Changing Messages\n",
    "message = \"Python is fun!\"\n",
    "print(message)\n",
    "message = \"Let's learn Python together.\"\n",
    "print(message)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c0bba11b-7bd6-4768-9804-4f4cf492c3bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello Eric, would you like to learn some Python today?\n"
     ]
    }
   ],
   "source": [
    "# Exercise 3: Personalized Message\n",
    "name = \"Eric\"\n",
    "print(f\"Hello {name}, would you like to learn some Python today?\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3e4c95a3-93ac-4c3a-936c-ed54ccb94a76",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Albert Einstein once said, 'A person who never made a mistake never tried anything new.'\n"
     ]
    }
   ],
   "source": [
    "# Exercise 4: Famous Quote\n",
    "print(\"Albert Einstein once said, 'A person who never made a mistake never tried anything new.'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "dd304028-28dd-4dd0-ae24-0ace2af25a80",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Albert Einstein once said, 'A person who never made a mistake never tried anything new.'\n"
     ]
    }
   ],
   "source": [
    "# Exercise 5: Famous Quote with Variables\n",
    "famous_person = \"Albert Einstein\"\n",
    "message = f\"{famous_person} once said, 'A person who never made a mistake never tried anything new.'\"\n",
    "print(message)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bf63d2eb-0303-46d1-b5fd-c87bfad89a9a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n",
      "8\n",
      "8\n",
      "8\n"
     ]
    }
   ],
   "source": [
    "# Exercise 6: Arithmetic Operations\n",
    "print(5 + 3)\n",
    "print(10 - 2)\n",
    "print(4 * 2)\n",
    "print(16 // 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a2b59944-f894-4da0-bd0e-7b26e6dc6e70",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "My favourite number is 7.\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Exercise 7: Favourite Number\n",
    "favourite_number = 7\n",
    "print(f\"My favourite number is {favourite_number}.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "360b75c0-a9c4-42bd-b15e-5b0ad3411088",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, welcome to Python programming!\n",
      "Albert Einstein once said, 'A person who never made a mistake never tried anything new.'\n"
     ]
    }
   ],
   "source": [
    "# Exercise 8: Comments\n",
    "# Author: [Prathmesh]\n",
    "# Date: [14/05/2025]\n",
    "print(\"Hello, welcome to Python programming!\")\n",
    "\n",
    "# This program prints a famous quote\n",
    "print(\"Albert Einstein once said, 'A person who never made a mistake never tried anything new.'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e4eec585-cde3-429a-9c5c-d12d78447267",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alice\n",
      "Bob\n",
      "Charlie\n"
     ]
    }
   ],
   "source": [
    "# Exercise 9: List of Friends\n",
    "names = [\"Alice\", \"Bob\", \"Charlie\"]\n",
    "print(names[0])\n",
    "print(names[1])\n",
    "print(names[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c916e6e7-1b71-4f9e-86d6-de1a9bcf7105",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello Alice, how are you today?\n",
      "Hello Bob, how are you today?\n",
      "Hello Charlie, how are you today?\n"
     ]
    }
   ],
   "source": [
    "# Exercise 10: Personalized Messages\n",
    "for name in names:\n",
    "    print(f\"Hello {name}, how are you today?\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0d6ae763-53b2-45da-83ed-c7ee12c8b09f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I would like to own a Honda motorcycle.\n",
      "I would like to own a Tesla car.\n",
      "I would like to own a Boeing airplane.\n"
     ]
    }
   ],
   "source": [
    "# Exercise 11: Favourite Transportation\n",
    "transport_modes = [\"Honda motorcycle\", \"Tesla car\", \"Boeing airplane\"]\n",
    "for mode in transport_modes:\n",
    "    print(f\"I would like to own a {mode}.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce2c2149-ac00-4c37-ba1e-5d4c819293fb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
